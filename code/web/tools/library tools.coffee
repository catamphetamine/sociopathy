читальня = {}

читальня.delete_category_recursive = (_id, пользователь, возврат) ->
	цепь(возврат)
		.сделать ->
			db('library_categories').find({ надраздел: _id }).toArray(@)
			
		.все_вместе (подраздел) ->
			читальня.delete_category_recursive(подраздел, пользователь, @)

		.сделать ->
			db('library_articles').find({ раздел: _id }).toArray(@)
			
		.все_вместе (заметка) ->
			читальня.delete_article(заметка, пользователь, @)
			
		.сделать ->
			читальня.delete_category(_id, пользователь, @)
			
читальня.delete_category = (_id, пользователь, возврат) ->
	раздел = null
	
	цепь(возврат)
		.сделать ->
			# если вместо _id дали раздел - не искать его второй раз
			if _id._id?
				return @.done(_id)
			db('library_categories').findOne({ _id: _id }, @)
			
		.сделать (category) ->
			раздел = category
			
			db('library_paths').find({ раздел: _id }).toArray(@.в 'пути')
			
		.сделать ->
			system_trash('раздел читальни', { раздел: раздел, пути: @.$.пути }, пользователь, @)
			
		.сделать ->
			db('library_paths').remove({ раздел: _id }, @)
			
		.сделать ->
			db('library_categories').remove({ _id: _id }, @)
			
# пути разделов

читальня.путь_к_разделу = (_id, возврат) ->
	цепь(возврат)
		.сделать ->
			db('library_paths').find({ раздел: _id }, { limit: 1, sort: [['_id', -1]] }).toArray(@)
			
		.сделать (пути) ->
			if пути.пусто()
				return @.error('Не найден путь к разделу')
			
			@.done(пути[0].путь)

читальня.создать_путь_к_разделу = (раздел, parent, возврат) ->
	цепь(возврат)
		.сделать ->
			читальня.новый_путь_к_разделу(раздел, parent, @.в 'путь')
			
		.сделать (путь) ->
			читальня.записать_путь_к_разделу(раздел._id, путь, @)

		.сделать ->
			@.done(@.$.путь)
			
читальня.новый_путь_к_разделу = (раздел, parent, возврат) ->
	путь = снасти.escape_id(раздел.название)

	цепь(возврат)
		.сделать ->
			if not parent?
				return @.return(путь)
			
			if typeof parent == 'string'?
				return @.return(parent + '/' + путь)
			
			if parent._id?
				parent = parent._id

			читальня.путь_к_разделу(parent, @)
		
		.сделать (путь_к_надразделу) ->
			@.done(путь_к_надразделу + '/' + путь)
			
читальня.записать_путь_к_разделу = (раздел, путь, возврат) ->
	цепь(возврат)
		.сделать ->
			db('library_paths').remove({ путь: путь }, { safe: yes }, @)
			
		.сделать ->
			db('library_paths').save({ раздел: раздел, путь: путь }, { safe: yes }, @)

# пути заметок

читальня.путь_к_заметке = (_id, возврат) ->
	цепь(возврат)
		.сделать ->
			db('library_paths').find({ заметка: _id }, { limit: 1, sort: [['_id', -1]] }).toArray(@)
			
		.сделать (пути) ->
			if пути.пусто()
				return @.error('Не найден путь к заметке')
			
			@.done(пути[0].путь)
			
читальня.создать_путь_к_заметке = (заметка, возврат) ->
	цепь(возврат)
		.сделать ->
			читальня.новый_путь_к_заметке(заметка, @)
			
		.сделать (путь) ->
			читальня.записать_путь_к_заметке(заметка._id, путь, @)
			
читальня.новый_путь_к_заметке = (заметка, возврат) ->
	путь = снасти.escape_id(заметка.название)
	
	цепь(возврат)
		.сделать ->
			if not заметка.раздел?
				return @.return(путь)
			
			читальня.путь_к_разделу(заметка.раздел, @)
		
		.сделать (путь_к_разделу) ->
			@.done(путь_к_разделу + '/' + путь)
			
читальня.записать_путь_к_заметке = (заметка, путь, возврат) ->
	цепь(возврат)
		.сделать ->
			db('library_paths').remove({ путь: путь }, { safe: yes }, @)
			
		.сделать ->
			db('library_paths').save({ заметка: заметка, путь: путь }, { safe: yes }, @)

#

читальня.обновить_пути = (раздел, возврат) ->
	цепь(возврат)
		.сделать ->
			читальня.создать_путь_к_разделу(раздел, раздел.надраздел, @.в 'путь')
			
		.сделать ->
			db('library_categories').find({ надраздел: раздел._id }).toArray(@)
			
		.все_вместе (подраздел) ->
			читальня.обновить_пути(подраздел, @)

		.сделать ->
			db('library_articles').find({ раздел: раздел._id }).toArray(@)
			
		.все_вместе (заметка) ->
			читальня.создать_путь_к_заметке(заметка, @)
			
		.сделать ->
			@.done(@.$.путь)
			
читальня.rename_category = (раздел, возврат) ->
	цепь(возврат)
		.сделать ->
			db('library_categories').update({ _id: раздел._id }, { $set: { название: раздел.название } }, { safe: yes }, @)
		
		.сделать ->
			читальня.обновить_пути(раздел, @)
			
читальня.delete_article = (_id, пользователь, возврат) ->
	заметка = null
	
	if _id._id?
		заметка = _id
		_id = _id._id
		
	цепь(возврат)
		.сделать ->
			db('library_paths').find({ заметка: _id }).toArray(@.в 'пути')
			
		.сделать ->
			if заметка?
				return @.done(заметка)
			db('library_articles').findOne({ _id: _id }, @)
			
		.сделать (заметка) ->
			system_trash('заметка читальни', { заметка: заметка, пути: @.$.пути }, пользователь, @)
			
		.сделать ->
			db('library_paths').remove({ заметка: _id }, @)
			
		.сделать ->
			db('library_articles').remove({ _id: _id }, @)
			
module.exports = читальня