# защита от перебора пароля:
#
# когда вход, проверяют "предыдущую неудавшуюся попытку входа"
# если она меньше, чем за час до текущей - ставить "температуру" в 2 раза больше (2, если ноль), и прописывать уже эту дату попытки входа
# если температура больше 1000 - не давать входить.
# каждые 15 минут температура остывает в 2 раза
http.post '/вход', (ввод, вывод) ->
	The_hottest_allowed_temperature = 1000
	Temperature_half_life = 15 # minutes
	Temperature_doubles_when_in_interval = 60 # minutes
	
	пользователь = пользовательское.взять.await({ имя: ввод.данные.имя }, { полностью: yes })

	if not пользователь?
		throw 'Такого пользователя нет в нашей сети'
		
	session = db('people_sessions')._.find_one({ пользователь: пользователь._id })
			
	# насколько успело остыть - настолько остудить
	температура = 0
	if session.последний_неудавшийся_вход?
		температура = session.последний_неудавшийся_вход.температура
		когда = session.последний_неудавшийся_вход.когда
		сейчас = new Date()
				
		while когда.add(Temperature_half_life).minutes().isBefore(сейчас)
			температура /= 2
			когда = когда.add(Temperature_half_life).minutes()
			if температура < 1
				температура = 0
				delete session.последний_неудавшийся_вход
				break
			
	if пользователь.пароль != ввод.данные.пароль
		не_вошёл = yes
		if температура < The_hottest_allowed_temperature
			if session.последний_неудавшийся_вход?
				if session.последний_неудавшийся_вход.когда.add(Temperature_doubles_when_in_interval).minutes().isAfter(new Date())
						температура *= 2
			else
				температура = 2
				
			db('people_sessions')._.update({ пользователь: @._.пользователь._id }, { $set: { последний_неудавшийся_вход: { когда: new Date(), температура: температура } } })
	
	if температура >= The_hottest_allowed_temperature
		throw 'Возможно вы пытаетесь взломать пароль. Попробуйте позже.'
		
	if не_вошёл?
		throw 'Неверный пароль'
	
	db('people_sessions')._.update({ пользователь: пользователь._id }, { $unset: { последний_неудавшийся_вход: yes } })
	
	пользовательское.войти.await(пользователь, ввод, вывод)

	вывод.send(пользователь: пользовательское.поля(пользователь))

http.post '/выход', (ввод, вывод) ->
	пользовательское.выйти ввод, вывод
	вывод.send {}
	
http.put '/прописать', (ввод, вывод) ->
	if Options.Invites
		query =
			ключ: ввод.данные.приглашение,
			использовано:  { $exists : no } 
				
		update = { $set: { использовано: yes } }
		
		collection = db('invites')
		invite = collection.findAndModify.bind_await(collection)(query, [], update, {})
	
		if not invite?
			throw 'No invite given'
	
	человек = ввод.данные
	
	человек['когда пришёл'] = new Date()
	
	проверка = (id, возврат) ->
		found = db('people')._.find_one({ id: id })
		возврат(null, not found?)
				
	адресное_имя = снасти.generate_unique_id.await(человек.имя, проверка)
	
	человек['адресное имя'] = адресное_имя
			
	пользователь = db('people')._.save(человек)

	тайный_ключ = пользовательское.сделать_тайный_ключ(пользователь)
	
	db('people_private_keys')._.save({ пользователь: пользователь._id, 'тайный ключ': тайный_ключ })

	db('circles')._.save({ пользователь: человек._id, круг: 'Основной', члены: [] })

	db('people_sessions')._.save({ пользователь: человек._id }, { новости: { беседы: {}, обсуждения: {}, новости: [] }})

	db('news')._.save({ что: 'прописка', пользователь: человек._id, когда: new Date() })
	
	вывод.send(ключ: пользователь._id)

http.get '/приглашение/проверить', (ввод, вывод) ->
	приглашение = db('invites')._.find_one {ключ: ввод.данные.приглашение.toString() }
		
	if not приглашение?
		throw 'Нет такого приглашения в списке'
		
	if приглашение.использовано
		throw 'Это приглашение уже использовано'
		
	вывод.send приглашение: приглашение

http.get '/сеть/данные пользователя', (ввод, вывод, пользователь) ->
	if ввод.session?
		session = db('people_sessions')._.find_one({ пользователь: пользователь._id })
		
		$ = {}
			
		$.session =
			настройки: session.настройки
			не_показывать_подсказки: session.не_показывать_подсказки
		
		$.пользователь = пользовательское.поля(['...', 'photo_version', 'полномочия'], пользователь)
			
		$.пользователь.беседы = {}
		$.пользователь.обсуждения = {}
		$.пользователь.новости = {}
		
		вывод.send($)
	else
		if ввод.cookies.user?
			вывод.clearCookie 'user'
		вывод.send(ошибка: 'Пользователь не найден')
		
http.put '/сеть/человек/данные', (ввод, вывод, пользователь) ->
	if ввод.данные.имя != пользователь.имя
		человек_с_таким_именем = db('people')._.find_one({ имя: ввод.данные.имя, _id: { $ne: пользователь._id } })
		if человек_с_таким_именем?
			show_error('Такое имя уже занято')
		
	# проверка на занятость имени не атомарна, но пока так сойдёт
	db('people')._.update({ _id: пользователь._id }, { $set: { имя: ввод.данные.имя, описание: ввод.данные.описание, откуда: ввод.данные.откуда, 'о себе': JSON.parse(ввод.данные.о_себе) } })
	
	вывод.send {}
	
	if (ввод.данные.имя != пользователь.имя)
		эфир.отправить('пользователь', 'смена имени', ввод.данные.имя, { кому: пользователь._id })
			
http.put '/сеть/человек/картинка', (ввод, вывод, пользователь) ->
	имя = ввод.данные.имя.to_unix_file_name()
	
	путь = Options.Upload_server.Temporary_file_path + '/' + имя + '.jpg'
	место = null

	место = Options.Upload_server.File_path + '/люди/' + пользователь['адресное имя'].to_unix_file_name() + '/картинка'
	снасти.создать_путь.await(место)
			
	resize.await(путь, место + '/маленькая.jpg', { размер: Options.User.Picture.Chat.Size, квадрат: yes })
			
	снасти.переместить_и_переименовать.await(путь, { место: место, имя: 'большая.jpg' })
			
	db('people')._.update({ _id: пользователь._id }, { $inc: { 'avatar_version': 1 } }, { safe: yes })
			
	пользователь = db('people')._.find_one({ _id: пользователь._id })
			
	эфир.отправить('пользователь', 'аватар обновлён', { version: пользователь.avatar_version }, { кому: пользователь._id })
	вывод.send {}

http.put '/сеть/человек/фотография', (ввод, вывод, пользователь) ->
	имя = ввод.данные.имя.to_unix_file_name()
	
	путь = Options.Upload_server.Temporary_file_path + '/' + имя + '.jpg'
	
	место = Options.Upload_server.File_path + '/люди/' + пользователь['адресное имя'].to_unix_file_name()
	
	снасти.создать_путь.await(место)
	снасти.переместить_и_переименовать.await(путь, { место: место, имя: 'фотография.jpg' })
	
	db('people')._.update({ _id: пользователь._id }, { $inc: { 'photo_version': 1 } }, { safe: yes })
	вывод.send {}

http.get '/сеть/пользователь/настройки', (ввод, вывод, пользователь) ->
	пользователь = пользовательское.пользователь_полностью.await(ввод)
			
	session = db('people_sessions')._.find_one({ пользователь: пользователь._id })
			
	настройки = {}
			
	if (пользователь.почта)
		настройки.почта = пользователь.почта
	
	if пользователь.настройки
		настройки.настройки = пользователь.настройки
		
	настройки.язык = session.настройки.язык
		
	#настройки.Клавиши = session.настройки.Клавиши
		
	вывод.send настройки

http.post '/сеть/пользователь/настройки', (ввод, вывод, пользователь) ->
	клавиши = JSON.parse(ввод.данные.клавиши)
	
	пользователь = пользовательское.пользователь_полностью.await(ввод)
			
	почта_изменилась = (пользователь.почта != ввод.данные.почта)
			
	if почта_изменилась
		человек_с_такой_почтой = db('people')._.find_one({ почта: ввод.данные.почта, _id: { $ne: пользователь._id } })
		if человек_с_такой_почтой?
			show_error('Вы указали почтовый ящик, уже записанный на другого члена нашей сети')
				
	# проверка на занятость имени не атомарна, но пока так сойдёт
	
	новые_данные_пользователя = {}
	
	if (ввод.данные.почта)
		новые_данные_пользователя.почта = ввод.данные.почта
		
	db('people')._.update({ _id: пользователь._id }, { $set: новые_данные_пользователя })
	
	настройки = {}
	
	настройки.клавиши = клавиши
		
	if ввод.данные.язык?
		настройки.язык = ввод.данные.язык
	
	db('people_sessions')._.update({ пользователь: пользователь._id }, { $set: { настройки: настройки } })
	
	if почта_изменилась
		почта.письмо(кому: пользователь.имя + ' <' + пользователь.почта + '>', тема: 'Проверка вашего нового почтового ящика', сообщение: 'Теперь это ваш почтовый ящик в нашей сети')
		
	эфир.отправить("пользователь", "настройки.клавиши", { клавиши: клавиши }, { кому: пользователь._id })
		
	вывод.send {}

http.get '/сеть/мусорка/личная', (ввод, вывод, пользователь) ->
	содержимое = db('trash')._.find({ пользователь: пользователь._id })
	вывод.send(содержимое: содержимое)
			
http.delete '/сеть/подсказка', (ввод, вывод, пользователь) ->
	db('people_sessions')._.update({ пользователь: пользователь._id }, { $addToSet: { 'не_показывать_подсказки': ввод.данные.подсказка } })			
	эфир.отправить("пользователь", "не_показывать_подсказку", { подсказка: ввод.данные.подсказка }, { кому: пользователь._id })
	вывод.send {}
			
http.get '/сеть/черновик', (ввод, вывод, пользователь) ->
	что = ввод.данные.что

	query = null
	
	if что == 'заметка'
		query = { заметка: ввод.данные.заметка }
	else
		query = { что: что }
		
	черновик = db('drafts')._.find_one(Object.x_over_y({ пользователь: пользователь._id }, query))
	
	if not черновик?
		return вывод.send({})
	
	вывод.send(черновик: черновик.данные)
			
http.put '/сеть/черновик', (ввод, вывод, пользователь) ->
	что = ввод.данные.что
	данные = ввод.данные.данные
	
	query = null
	
	if что == 'заметка'
		query = { заметка: ввод.данные.заметка }
	else
		query = { что: что }
				
	db('drafts')._.update(Object.x_over_y({ пользователь: пользователь._id }, query), { $set: { данные: данные } })
	вывод.send({})
			
http.get '/сеть/пароль', (ввод, вывод, пользователь) ->
	db('people')._.update({ _id: пользователь._id, пароль: '123' }, { $set: { пароль: ввод.данные.пароль } })
	вывод.send({})
