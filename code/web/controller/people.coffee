#хранилище.bind 'people',
#	выбрать: (настройки, возврат) ->
#		условия = настройки.условия || {}
#		@find(условия, { skip: настройки.с - 1, limit: настройки.сколько }).toArray возврат

http.get '/люди', (ввод, вывод) ->
	цепь(вывод)
		.сделать ->
			options =
				collection: 'people'
				query: {},
				total: yes
				
			снасти.either_way_loading(ввод, options, @)
			
		.сделать (result) ->
			for man in result.data
				man = пользовательское.скрыть(man)
				
			ответ = 
				люди: result.data
				'есть ещё?': result['есть ещё?']
				'есть ли предыдущие?': result['есть ли предыдущие?']
				всего: result.всего
				
			вывод.send(ответ)

http.get '/человек', (ввод, вывод) ->
	цепь(вывод)
		.сделать ->
			пользовательское.взять({ 'адресное имя': ввод.настройки.адресное_имя }, @)

		.сделать (пользователь) ->
			if not пользователь?
				return вывод.send
					ошибка:
						текст: "Пользователь «#{ввод.настройки.адресное_имя}» не состоит в нашей сети"
						уровень: 'ничего страшного'
			
			for key, value of пользователь
				@.$[key] = value
				
			@.done()
			
		.сделать ->
			пользовательское.пользователь(ввод, @._.в 'пользователь')
			
		.сделать ->
			db('people_sessions').findOne({ пользователь: @.$._id }, @)
			
		.сделать (session) ->
			@.$['когда был здесь'] = session['когда был здесь']
			db('picture_albums').find({ пользователь: @.$._id }, { limit: 1}).toArray(@)
			
		.сделать (картинки) ->
			@.$['есть ли картинки?'] = !картинки.пусто()
			@.done()
			
		.сделать ->
			db('video_albums').find({ пользователь: @.$._id }, { limit: 1}).toArray(@)
			
		.сделать (видеозаписи) ->
			@.$['есть ли видеозаписи?'] = !видеозаписи.пусто()
			@.done()
			
		.сделать ->
			db('peoples_books').findOne({ пользователь: @.$._id }, @)
			
		.сделать (книги) ->
			if книги? && !книги.книги.пусто()
				@.$['есть ли книги?'] = yes
			@.done()
			
		#.сделать ->
		#	db('diaries').find({ пользователь: @.$._id }, { limit: 1}).toArray(@)
			
		#.сделать (diaries) ->
		#	@.$['ведёт ли дневник?'] = !diaries.пусто()
		#	@.done()
			
		#.сделать ->
		#	db('journals').find({ пользователь: @.$._id }, { limit: 1}).toArray(@)
			
		#.сделать (journals) ->
		#	@.$['ведёт ли журнал?'] = !journals.пусто()
		#	@.done()
			
		.сделать ->
			if not @._.пользователь?
				return @.done()
			db('circles').find({ пользователь: @._.пользователь._id }).toArray(@)
			
		.сделать (круги) ->
			if not круги
				return @.done()
			
			for круг in круги
				for член in круг.члены
					if член + '' == @.$._id + ''
						@.$.в_круге = круг
						return @.done()
					
			return @.done()
			
		.сделать ->
			вывод.send @.$
			
http.get '/человек/картинки/альбомы', (ввод, вывод) ->
	цепь(вывод)
		.сделать ->
			пользовательское.взять({ 'адресное имя': ввод.настройки['адресное имя'] }, @)
			
		.сделать (человек) ->
			@.$.пользователь = { имя: человек.имя }
			db('picture_albums').find({ пользователь: человек._id }, { sort: [['_id', 1]] }).toArray(@.в 'альбомы')
			
		.сделать ->
			вывод.send @.$
	
http.get '/человек/картинки/альбом', (ввод, вывод) ->
	цепь(вывод)
		.сделать ->
			пользовательское.взять({ 'адресное имя': ввод.настройки['адресное имя'] }, @._.в 'пользователь')
		
		.сделать (человек) ->
			@.$.пользователь = { имя: человек.имя }
			db('picture_albums').findOne({ пользователь: человек._id, id: ввод.настройки.альбом }, @.в 'альбом')
	
		.сделать (альбом) ->
			if not альбом?
				return вывод.send(альбом: { картинки: [] })
			db('pictures').find({ альбом: альбом._id }, { sort: [['_id', 1]] }).toArray(@)
			
		.сделать (картинки) ->
			@.$.альбом.картинки = картинки
			вывод.send @.$
			
http.get '/человек/видео/альбомы', (ввод, вывод) ->
	цепь(вывод)
		.сделать ->
			пользовательское.взять({ 'адресное имя': ввод.настройки['адресное имя'] }, @)
			
		.сделать (человек) ->
			@.$.пользователь = { имя: человек.имя }
			db('video_albums').find({ пользователь: человек._id }, { sort: [['_id', 1]] }).toArray(@.в 'альбомы')
			
		.сделать (альбомы) ->
			for альбом in @.$.альбомы
				альбом.видео = []
			вывод.send(@.$)
		
http.get '/человек/видео/альбом', (ввод, вывод) ->
	цепь(вывод)
		.сделать ->
			пользовательское.взять({ 'адресное имя': ввод.настройки['адресное имя'] }, @)
			
		.сделать (человек) ->
			@.$.пользователь = { имя: человек.имя }
			db('video_albums').findOne({ пользователь: человек._id, id: ввод.настройки.альбом }, @.в 'альбом')
			
		.сделать (альбом) ->
			if not альбом
				return вывод.send(альбом: { видео: [] })
			db('videos').find({ альбом: альбом._id }, { sort: [['_id', 1]] }).toArray(@)
			
		.сделать (видео) ->
			@.$.альбом.видео = видео
			вывод.send @.$
			
http.get '/сеть/черновик', (ввод, вывод) ->
	цепь(вывод)
		.сделать ->
			#console.log(ввод.настройки.что)
			вывод.send({})
			
http.get '/человек/по имени', (ввод, вывод) ->
	цепь(вывод)
		.сделать ->
			db('people').findOne({ имя: ввод.настройки.имя }, @)
			
		.сделать (человек) ->
			if not человек?
				return вывод.send(ошибка: 'Пользователь не найден', не_найден: yes)
			
			вывод.send(пользовательское.поля(человек))
			
http.get '/человек/по почте', (ввод, вывод) ->
	цепь(вывод)
		.сделать ->
			db('people').findOne({ почта: ввод.настройки.почта }, @)
			
		.сделать (человек) ->
			if not человек?
				return вывод.send(ошибка: 'Пользователь не найден', не_найден: yes)
			
			вывод.send(пользовательское.поля(человек))