хранилище.bind 'people',
	выбрать: (настройки, возврат) ->
		условия = настройки.условия || {}
		@find(условия, { skip: настройки.с - 1, limit: настройки.сколько }).toArray возврат

http.get '/люди', (ввод, вывод) ->
	цепь(вывод)
		.сделать ->
			if ввод.настройки.после?
				return хранилище.collection('people').find({ _id: { $lt: хранилище.collection('people').id(ввод.настройки.после) } }, { limit: ввод.настройки.сколько, sort: [['$natural', -1]] }).toArray(@.в 'люди')
			хранилище.collection('people').find({}, { limit: ввод.настройки.сколько, sort: [['$natural', -1]] }).toArray(@.в 'люди')

		.сделать (люди) ->
			return @() if люди.length == 0
			хранилище.collection('people').find({ _id: { $lt: люди[люди.length - 1]._id } }, { limit: 1, sort: [['$natural', -1]] }).toArray @
		
		.сделать (ещё_люди) ->
			есть_ли_ещё = no
			if ещё_люди.length > 0
				есть_ли_ещё = yes
				
			#пользователи = []
			#for пользователь in люди
			#	пользователи.push(данные_человека_для_показа(пользователь, { 'только основное': yes }))
			вывод.send люди: @.переменная('люди'), 'есть ещё?': есть_ли_ещё 

получить_данные_человека = (address_name, вывод, возврат) ->
	цепь(вывод)
		.сделать ->
			хранилище.collection('people').findOne { 'адресное имя': address_name }, @

		.сделать (пользователь) ->
			if not пользователь?
				return вывод.send
					ошибка:
						текст: "Пользователь «#{address_name}» не состоит в нашей сети"
						уровень: 'ничего страшного'
				
			возврат null, пользователь
			#возврат null, данные_человека_для_показа(пользователь)

###
данные_человека_для_показа = (человек, настройки) ->
	настройки = настройки || {}

	основные_поля =
	[
		'_id'
		'имя'
		'адресное имя'
		'описание'
		'картинка'
		'пол'
		'откуда'
	]
	
	второстепенные_поля =
	[
		'время рождения'
		'характер'
		'убеждения'
		'семейное положение'
	]

	данные_человека = {}
	
	for поле in основные_поля
		данные_человека[поле] = человек[поле]
	
	if not настройки['только основное']?
		for поле in второстепенные_поля
			данные_человека[поле] = человек[поле]
		
	данные_человека
###

http.get '/человек', (ввод, вывод) ->
	получить_данные_человека ввод.настройки.адресное_имя, вывод, (ошибка, данные) ->
		вывод.send данные