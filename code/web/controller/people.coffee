хранилище.bind 'people',
	выбрать: (настройки, возврат) ->
		условия = настройки.условия || {}
		@find(условия, { skip: настройки.с - 1, limit: настройки.сколько }).toArray возврат

http.get '/люди', (ввод, вывод) ->
	цепь(вывод)
		.сделать ->
			if ввод.настройки.после?
				return хранилище.collection('people').find({ _id: { $lt: хранилище.collection('people').id(ввод.настройки.после) } }, { limit: ввод.настройки.сколько, sort: [['$natural', -1]] }).toArray(@.в 'люди')
			хранилище.collection('people').find({}, { limit: ввод.настройки.сколько, sort: [['$natural', -1]] }).toArray(@.в 'люди')

		.сделать (люди) ->
			return @() if люди.length == 0
			хранилище.collection('people').find({ _id: { $lt: люди[люди.length - 1]._id } }, { limit: 1, sort: [['$natural', -1]] }).toArray @
		
		.сделать (ещё_люди) ->
			есть_ли_ещё = no
			if ещё_люди.length > 0
				есть_ли_ещё = yes
				
			вывод.send(люди: @.$.люди, 'есть ещё?': есть_ли_ещё)

global.получить_данные_человека = (address_name, вывод, возврат) ->
	цепь(вывод)
		.сделать ->
			хранилище.collection('people').findOne { 'адресное имя': address_name }, @

		.сделать (пользователь) ->
			if not пользователь?
				return вывод.send
					ошибка:
						текст: "Пользователь «#{address_name}» не состоит в нашей сети"
						уровень: 'ничего страшного'
				
			возврат null, пользователь

http.get '/человек', (ввод, вывод) ->
	цепь(вывод)
		.сделать ->
			global.получить_данные_человека(ввод.настройки.адресное_имя, вывод, @.в '$')
		.сделать ->
			пользовательское.пользователь(ввод, @)
		.сделать (пользователь) ->
			хранилище.collection('circles').findOne({ пользователь: пользователь._id }, @)
		.сделать (круги) ->
			if not круги?
				return @.done()
				
			круги = круги.круги
			
			for круг, члены of круги
				for член in члены
					if член + '' == @.$._id + ''
						@.$.в_круге = круг
						return @.done()
					
			return @.done()
		.сделать ->
			вывод.send @.$
			
http.get '/человек/картинки/альбомы', (ввод, вывод) ->
	вывод.send(альбомы: [
		{ id: 'Реклама', название: 'Реклама', описание: 'Разного рода интересная западная реклама' },
		{ id: 'Портрет', название: 'Портрет', описание: 'Мои фотографии' }])
			
http.get '/человек/видео/альбомы', (ввод, вывод) ->
	вывод.send(альбомы: [
		{ id: 'Художества', название: 'Художества', описание: 'Ролики на тему искусства' },
		{ id: 'Наркоман Павлик', название: 'Наркоман Павлик', описание: 'Ну всё, огонь. Валера, настало твоё время.' }])
	
http.get '/человек/видео/альбом', (ввод, вывод) ->
	if ввод.настройки.альбом == 'Художества'
		return вывод.send(видео: [
			{ источник: 'vimeo.com', внешний_id: '37391578' },
			{ источник: 'vimeo.com', внешний_id: '31426899' }])
	
	if ввод.настройки.альбом == 'Наркоман Павлик'
		return вывод.send(видео: [
			{ источник: 'youtube.com', внешний_id: 'R3g1fkAqolQ' },
			{ источник: 'youtube.com', внешний_id: 'TT7UbfbeSjQ' }])
		
http.get '/человек/картинки/альбом', (ввод, вывод) ->
	if ввод.настройки.альбом == 'Реклама'
		return вывод.send(картинки: [
			{ имя: 'дети 1', формат: 'jpg' },
			{ имя: 'дети 2', формат: 'jpg' },
			{ имя: 'дети 3', формат: 'jpg' },
			{ имя: 'книги 1', формат: 'jpg' },
			{ имя: 'книги 2', формат: 'jpg' },
			{ имя: 'книги 3', формат: 'jpg' }])
	
	if ввод.настройки.альбом == 'Портрет'
		return вывод.send(картинки: [
			{ имя: 'гермозона', формат: 'jpg' },
			{ имя: 'аниме', формат: 'jpg' }])
		
http.get '/человек/книги', (ввод, вывод) ->
	цепь(вывод)
		.сделать ->
			хранилище.collection('people').findOne { 'адресное имя': ввод.настройки['адресное имя'] }, @
		.сделать (человек) ->
			хранилище.collection('peoples_books').findOne({ пользователь: человек._id }, @)
		.сделать (книги) ->
			if not книги
				return вывод.send(книги: [])
			@.done(книги.книги)
		.все_вместе (книга) ->
			хранилище.collection('books').findOne({ _id: книга }, @)
		.сделать (книги) ->
			вывод.send(книги: книги)