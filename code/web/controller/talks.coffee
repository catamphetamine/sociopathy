http.get '/сеть/беседы', (ввод, вывод, пользователь) ->
	цепь(вывод)
		.сделать ->
			снасти.batch_loading(ввод, { from: 'talks', query: { участники: пользователь._id }, parameters: { sort: [['обновлено', -1]] } }, @.в 'беседы')
			
		.сделать ->
			пользовательское.подставить(@.$.беседы, 'участники', @)
			
		.сделать ->
			@.done(@.$.беседы)
			
		.все_вместе (беседа) ->
			db('messages').find({ общение: беседа._id, чего: 'беседы' }, { sort: [['_id', -1]], limit: 1 }).toArray(@)
			
		.сделать (последние_сообщения) ->
			сообщения = []
			for array in последние_сообщения
				if not array.пусто()
					сообщения.push(array[0])
			
			последние_сообщения = сообщения
			пользовательское.подставить(последние_сообщения, 'отправитель', @)
			
		.сделать (последние_сообщения) ->
			последние_сообщения.merge_into(@.$.беседы, 'последнее_сообщение', (беседа) -> @.общение + '' == беседа._id + '')
			
		#.сделать ->
			вывод.send @.$
			
options =
	id: 'talks'
	общение: 'беседа'
	общение_во_множественном_числе: 'беседы'
	
options.private = yes

options.сообщения_чего = (result, сообщения_чего) ->
	result.участники = сообщения_чего.участники.map((x) -> x.toString())
					
result = messages.messages(options)

result.enable_message_editing('беседы')
result.enable_renaming('беседы')

append = (data, environment) ->
	data.участники = [environment.пользователь._id]
	data.создана = data.создано
	delete data.создано

result.enable_creation('беседа', append)

#result.enable_unsubscription('беседы')