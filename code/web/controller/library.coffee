http.get '/читальня/раздел/путь', (ввод, вывод) ->
	_id = db('library_categories').id(ввод.настройки._id)
	
	цепь(вывод)
		.сделать ->
			читальня.путь_к_разделу(_id, @)
		
		.сделать (путь) ->
			вывод.send(путь: путь)
	
http.get '/читальня/раздел', (ввод, вывод) ->
	_id = ввод.настройки._id

	цепь(вывод)
		.сделать ->
			if not _id?
				@.$.раздел = {}
				return @.done()
			db('library_categories').findOne({ _id: db('library_categories').id(_id) }, @.в 'раздел')
			
		.сделать ->
			if not @.$.раздел?
				return @.error("Раздел не найден")
			
			query = null
			
			if not _id?
				# мы находимся на главной странице читальни
				query = { надраздел: { $exists: 0 } }
			else
				# мы находимся на странице некоего раздела читальни
				query = { надраздел: @.$.раздел._id }
				
			db('library_categories').find(query, { sort: [['_id', 1]] }).toArray(@)
		
		.сделать (подразделы) ->
			@.$.раздел.подразделы = подразделы
			@.done(подразделы)
		
		.все_вместе (подраздел) ->
			цепь(@)
				.сделать ->
					читальня.путь_к_разделу(подраздел._id, @)
				.сделать (путь) ->
					подраздел.путь = путь
					@.done()
				
		.сделать ->
			query = null
			
			if not _id?
				# мы находимся на главной странице читальни
				# (там заметок быть не должно)
				query = { раздел: { $exists: 0 } }
			else
				# мы находимся на странице некоего раздела читальни
				query = { раздел: @.$.раздел._id }

			db('library_articles').find(query, { sort: [['_id', 1]] }).toArray @
		
		.сделать (заметки) ->
			@.$.раздел.заметки = заметки
			@.done(заметки)
		
		.все_вместе (заметка) ->
			цепь(@)
				.сделать ->
					читальня.путь_к_заметке(заметка._id, @)
				.сделать (путь) ->
					заметка.путь = путь
					@.done()

		.сделать () ->
			вывод.send(@.$)

http.get "/читальня/заметка", (ввод, вывод) ->
	_id = db('library_articles').id(ввод.настройки._id)

	цепь(вывод)
		.сделать ->
			db('library_articles').findOne({ _id: _id }, @)
			
		.сделать (заметка) ->
			if not заметка?
				return @.error("Заметка не найдена")
			вывод.send(заметка: заметка)
			
http.get "/раздел или заметка", (ввод, вывод) ->
	цепь(вывод)
		.сделать ->
			db('library_paths').findOne({ путь: ввод.настройки.путь }, @)
			
		.сделать (раздел_или_заметка) ->
			if not раздел_или_заметка?
				return @.error("Раздел или заметка «#{ввод.настройки.путь}» не найдены", { уровень: 'ничего страшного' })
			
			if раздел_или_заметка.заметка?
				return вывод.send(заметка: раздел_или_заметка.заметка)
			
			else
				return вывод.send(раздел: раздел_или_заметка.раздел)
			
http.post '/сеть/читальня/заметка', (ввод, вывод, пользователь) ->
	_id = db('library_articles').id(ввод.body._id)
	версия = ввод.body.версия
	
	название = ввод.body.название
	содержимое = ввод.body.содержимое
	
	цепь(вывод)
		.сделать ->
			db('library_articles').findOne({ _id: _id }, @)
			
		.сделать (заметка) ->
			if заметка.название != название
				заметка.название = название
				return читальня.создать_путь_к_заметке(заметка, @)
			@.done()
			
		.сделать (путь) ->
			if путь?
				@.$.путь = путь.путь
			
			query = { _id: _id }
			
			if версия?
				query.версия = parseInt(версия)
			else
				query.версия = { $exists: 0 }
			
			db('library_articles').update(query, { $set: { название: название, содержимое: содержимое }, $inc: { версия: 1 } }, { safe: yes }, @)
			
		.сделать (result) ->
			if result != 1
				return вывод.send({ старая_версия: yes })
			
			db('library_articles').findOne({ _id: _id }, @)
			
		.сделать (заметка) ->
			if @.$.путь?
				заметка.путь = @.$.путь
			вывод.send(заметка)
						
http.post '/сеть/читальня/раздел', (ввод, вывод, пользователь) ->
	разделы = JSON.parse(ввод.body.разделы)
	
	надраздел = null
	if ввод.body.надраздел?
		надраздел = db('library_categories').id(ввод.body.надраздел)
	
	цепь(вывод)
		# заполнить пути
		
		#.сделать ->
		#	if надраздел?
		#		return читальня.путь_к_разделу(надраздел, @.в 'путь_к_надразделу')
		#	@.done()
			
		#.сделать ->
		#	@.done(разделы.новые)
			
		#.все_вместе (раздел) ->
		#	раздел.путь = читальня.новый_путь_к_разделу(раздел, надраздел)
		#	@.done()
				
		# проверить занятость названий
			
		.сделать ->
			@.done(разделы.новые)
			
		.все_вместе (раздел) ->
			data = { название: раздел.название }
			
			if надраздел?
				data.надраздел = надраздел
				
			db('library_categories').findOne(data, @)
			
		.сделать (разделы) ->
			if not разделы.пусто()
				return @.error('Раздел с таким именем уже есть в этом надразделе: ' + разделы[0])
			@.done()
	
		# удалить удалённые
		
		.сделать ->
			@._.удалённые_разделы = разделы.удалённые
			@.done(разделы.удалённые)
			
		.все_вместе (раздел) ->
			_id = db('library_categories').id(раздел)
			
			читальня.delete_category_recursive(_id, пользователь, @)
	
		# переименовать переименованные	
			
		.сделать ->
			@._.переименованные_разделы = разделы.переименованные.map((x) ->
				{ _id: db('library_categories').id(x._id), название: x.название }
			)
			
			@.done(@._.переименованные_разделы)
			
		.все_вместе (раздел) ->
			if надраздел?
				раздел.надраздел = надраздел
				
			цепь(@)
				.сделать ->
					читальня.rename_category(раздел, @)
					
				.сделать (путь) ->
					раздел._id = раздел._id.toString()
					раздел.путь = путь
					@.done()
						
		# создать новые
		
		.сделать ->
			@.done(разделы.новые)
			
		.все_вместе (раздел) ->
			data = { название: раздел.название }
			
			if надраздел?
				data.надраздел = надраздел
				
			db('library_categories').save(data, { safe: yes }, @)
			
		.сделать (новые_разделы) ->
			@._.новые_разделы = новые_разделы
			@.done(новые_разделы)
			
		.все_вместе (раздел) ->
			#путь_к_надразделу = @.$.путь_к_надразделу.путь
			
			цепь(@)
				.сделать ->
					читальня.создать_путь_к_разделу(раздел, раздел.надраздел, @)
					
				.сделать (путь) ->
					раздел.путь = путь
					@.done()
			
		# всё
			
		.сделать ->
			result = 
				новые_разделы: JSON.stringify(@._.новые_разделы)
				переименованные_разделы: JSON.stringify(@._.переименованные_разделы)
				удалённые_разделы: JSON.stringify(@._.удалённые_разделы )
			
			вывод.send(result)
			
http.post '/сеть/читальня/раздел/перенести', (ввод, вывод, пользователь) ->
	_id = db('library_categories').id(ввод.body.раздел)
	
	цепь(вывод)
		.сделать ->
			action = null
			
			if ввод.body.куда?
				надраздел = db('library_categories').id(ввод.body.куда)
				
				if (надраздел + '' == _id + '')
					return @.error('Нельзя перенести раздел сам в себя')
				
				action = { $set: { надраздел: надраздел } }
			else
				action = { $unset: { надраздел: 1 } }
			
			db('library_categories').update({ _id: _id }, action, { safe: yes }, @)
			
		.сделать (result) ->
			if result != 1
				return @.error()
			@.done()
			
		.сделать ->
			db('library_categories').findOne({ _id: _id }, @)
			
		.сделать (раздел) ->
			читальня.обновить_пути(раздел, @)
			
		.сделать (путь) ->
			вывод.send({ путь: путь })
			
http.put '/сеть/читальня/заметка', (ввод, вывод, пользователь) ->
	название = ввод.body.название.trim()
	содержимое = ввод.body.содержимое
	раздел = db('library_categories').id(ввод.body.раздел)
	
	цепь(вывод)
		.сделать ->
			db('library_articles').findOne({ название: название, раздел: раздел }, @)
			
		.сделать (заметка) ->
			if заметка?
				return @.error('Заметка с таким именем уже есть в этом разделе')
			@.done()
			
		.сделать ->
			db('library_articles').save({ название: название, содержимое: содержимое, раздел: раздел }, { safe: yes }, @)
			
		.сделать (заметка) ->
			читальня.создать_путь_к_заметке(заметка, @)
			
		.сделать (путь) ->
			вывод.send({ путь: путь.путь })
			
http.delete '/сеть/читальня/заметка', (ввод, вывод, пользователь) ->
	_id = db('library_articles').id(ввод.body._id)
	
	цепь(вывод)
		.сделать ->
			db('library_articles').findOne({ _id: _id }, @._.в 'заметка')
			
		.сделать (заметка) ->
			читальня.путь_к_разделу(заметка.раздел, @.в 'путь_к_разделу')
			
		.сделать ->
			читальня.delete_article(@._.заметка, пользователь, @)
			
		.сделать ->
			вывод.send(@.$)
			
http.post '/сеть/читальня/заметка/перенести', (ввод, вывод, пользователь) ->
	_id = db('library_articles').id(ввод.body.заметка)
	
	цепь(вывод)
		.сделать ->
			action = null
			
			if not ввод.body.куда?
				return @.error('Нельзя перемещать заметки в корень читальни')
			
			db('library_articles').update({ _id: _id }, { $set: { раздел: db('library_categories').id(ввод.body.куда) } }, { safe: yes }, @)
			
		.сделать (result) ->
			if result != 1
				return @.error()
			@.done()
			
		.сделать ->
			db('library_articles').findOne({ _id: _id }, @)
			
		.сделать (заметка) ->
			читальня.создать_путь_к_заметке(заметка, @)
			
		.сделать (путь) ->
			вывод.send({ путь: путь.путь })
			
# поиск в читальне. пока не используется
http.get '/читальня/раздел или заметка/найти', (ввод, вывод) ->
	if not ввод.настройки.название?
		return вывод.send(ошибка: yes)
		
	шаблон = new RegExp('^' + RegExp.escape(ввод.настройки.название))
	
	цепь(вывод)
		.сделать ->
			db('library_categories').ensureIndex 'название', no, @
			
		.сделать ->
			db('library_articles').ensureIndex 'название', no, @
			
		.сделать ->
			db('library_categories').find({ название: шаблон }, { limit: ввод.настройки.сколько }).toArray @._.в 'разделы'
			
		.сделать ->
			Object.выбрать(['_id', 'id', 'название'], @._.разделы)
			if (@._.разделы.length == ввод.настройки.сколько)
				return вывод.send(разделы: @._.разделы)
			db('library_articles').find({ название: шаблон }, { limit: ввод.настройки.сколько }).toArray @._.в 'заметки'
			
		.сделать ->
			Object.выбрать(['_id', 'id', 'название'], @._.заметки)
			вывод.send(разделы: @._.разделы, заметки: @._.заметки)